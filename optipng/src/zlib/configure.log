--------------------
./configure --static
Thu Feb 14 13:33:33 PST 2013

Checking for gcc...
=== ztest48773.c ===
extern int getchar();
int hello() {return getchar();}
===
gcc -c -O3 ztest48773.c
... using gcc

Building static library libz.a version 1.2.7-optipng with gcc.


=== ztest48773.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
gcc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest48773.c
ztest48773.c:2: error: expected ‘=’, ‘,’, ‘;’, ‘asm’ or ‘__attribute__’ before ‘dummy’
(exit code 1)
Checking for off64_t... No.

=== ztest48773.c ===
#include <stdio.h>
int main(void) {
  fseeko(NULL, 0, 0);
  return 0;
}
===
gcc -O3 -o ztest48773 ztest48773.c
Checking for fseeko... Yes.

=== ztest48773.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
gcc -O3 -o ztest48773 ztest48773.c
Checking for strerror... Yes.

=== ztest48773.c ===
#include <unistd.h>
int main() { return 0; }
===
gcc -c -O3 ztest48773.c
Checking for unistd.h... Yes.

=== ztest48773.c ===
#include <stdarg.h>
int main() { return 0; }
===
gcc -c -O3 ztest48773.c
Checking for stdarg.h... Yes.

=== ztest48773.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
gcc -c -O3 ztest48773.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest48773.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
gcc -O3 -o ztest48773 ztest48773.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest48773.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
gcc -c -O3 ztest48773.c
Checking for return value of vsnprintf()... Yes.

=== ztest48773.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
gcc -c -O3 ztest48773.c
Checking for attribute(visibility) support... Yes.

=== ztest48773.c ===
#include <stdio.h>
#define is32(n,t) for(n=1,k=0;n;n<<=1,k++);if(k==32){puts(t);return 0;}
int main() {
    int k;
    unsigned i;
    unsigned long l;
    unsigned short s;
    is32(i, "unsigned")
    is32(l, "unsigned long")
    is32(s, "unsigned short")
    return 1;
}
===
gcc -O3 -DHAVE_HIDDEN ztest48773.c -o ztest48773
Looking for a four-byte integer type... Found.

ALL = static
AR = /usr/bin/libtool
ARFLAGS = -o
CC = gcc
CFLAGS = -O3 -DHAVE_HIDDEN
CPP = gcc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = gcc
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -DHAVE_HIDDEN
SHAREDLIB =
SHAREDLIBM =
SHAREDLIBV =
STATICLIB = libz.a
TEST = all teststatic
VER = 1.2.7-optipng
Z_U4 = unsigned
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /usr/local
sharedlibdir = ${libdir}
uname = Darwin
--------------------


--------------------
./configure --static
Thu Feb 14 13:35:23 PST 2013

Checking for gcc...
=== ztest49388.c ===
extern int getchar();
int hello() {return getchar();}
===
gcc -c -O3 ztest49388.c
... using gcc

Building static library libz.a version 1.2.7-optipng with gcc.


=== ztest49388.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
gcc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest49388.c
ztest49388.c:2: error: expected ‘=’, ‘,’, ‘;’, ‘asm’ or ‘__attribute__’ before ‘dummy’
(exit code 1)
Checking for off64_t... No.

=== ztest49388.c ===
#include <stdio.h>
int main(void) {
  fseeko(NULL, 0, 0);
  return 0;
}
===
gcc -O3 -o ztest49388 ztest49388.c
Checking for fseeko... Yes.

=== ztest49388.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
gcc -O3 -o ztest49388 ztest49388.c
Checking for strerror... Yes.

=== ztest49388.c ===
#include <unistd.h>
int main() { return 0; }
===
gcc -c -O3 ztest49388.c
Checking for unistd.h... Yes.

=== ztest49388.c ===
#include <stdarg.h>
int main() { return 0; }
===
gcc -c -O3 ztest49388.c
Checking for stdarg.h... Yes.

=== ztest49388.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
gcc -c -O3 ztest49388.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest49388.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
gcc -O3 -o ztest49388 ztest49388.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest49388.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
gcc -c -O3 ztest49388.c
Checking for return value of vsnprintf()... Yes.

=== ztest49388.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
gcc -c -O3 ztest49388.c
Checking for attribute(visibility) support... Yes.

=== ztest49388.c ===
#include <stdio.h>
#define is32(n,t) for(n=1,k=0;n;n<<=1,k++);if(k==32){puts(t);return 0;}
int main() {
    int k;
    unsigned i;
    unsigned long l;
    unsigned short s;
    is32(i, "unsigned")
    is32(l, "unsigned long")
    is32(s, "unsigned short")
    return 1;
}
===
gcc -O3 -DHAVE_HIDDEN ztest49388.c -o ztest49388
Looking for a four-byte integer type... Found.

ALL = static
AR = /usr/bin/libtool
ARFLAGS = -o
CC = gcc
CFLAGS = -O3 -DHAVE_HIDDEN
CPP = gcc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = gcc
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -DHAVE_HIDDEN
SHAREDLIB =
SHAREDLIBM =
SHAREDLIBV =
STATICLIB = libz.a
TEST = all teststatic
VER = 1.2.7-optipng
Z_U4 = unsigned
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /usr/local
sharedlibdir = ${libdir}
uname = Darwin
--------------------


--------------------
./configure --static
Thu Feb 14 14:27:20 PST 2013

Checking for gcc...
=== ztest50662.c ===
extern int getchar();
int hello() {return getchar();}
===
gcc -c -O3 ztest50662.c
... using gcc

Building static library libz.a version 1.2.7-optipng with gcc.


=== ztest50662.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
gcc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest50662.c
ztest50662.c:2: error: expected ‘=’, ‘,’, ‘;’, ‘asm’ or ‘__attribute__’ before ‘dummy’
(exit code 1)
Checking for off64_t... No.

=== ztest50662.c ===
#include <stdio.h>
int main(void) {
  fseeko(NULL, 0, 0);
  return 0;
}
===
gcc -O3 -o ztest50662 ztest50662.c
Checking for fseeko... Yes.

=== ztest50662.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
gcc -O3 -o ztest50662 ztest50662.c
Checking for strerror... Yes.

=== ztest50662.c ===
#include <unistd.h>
int main() { return 0; }
===
gcc -c -O3 ztest50662.c
Checking for unistd.h... Yes.

=== ztest50662.c ===
#include <stdarg.h>
int main() { return 0; }
===
gcc -c -O3 ztest50662.c
Checking for stdarg.h... Yes.

=== ztest50662.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
gcc -c -O3 ztest50662.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest50662.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
gcc -O3 -o ztest50662 ztest50662.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest50662.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
gcc -c -O3 ztest50662.c
Checking for return value of vsnprintf()... Yes.

=== ztest50662.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
gcc -c -O3 ztest50662.c
Checking for attribute(visibility) support... Yes.

=== ztest50662.c ===
#include <stdio.h>
#define is32(n,t) for(n=1,k=0;n;n<<=1,k++);if(k==32){puts(t);return 0;}
int main() {
    int k;
    unsigned i;
    unsigned long l;
    unsigned short s;
    is32(i, "unsigned")
    is32(l, "unsigned long")
    is32(s, "unsigned short")
    return 1;
}
===
gcc -O3 -DHAVE_HIDDEN ztest50662.c -o ztest50662
Looking for a four-byte integer type... Found.

ALL = static
AR = /usr/bin/libtool
ARFLAGS = -o
CC = gcc
CFLAGS = -O3 -DHAVE_HIDDEN
CPP = gcc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = gcc
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -DHAVE_HIDDEN
SHAREDLIB =
SHAREDLIBM =
SHAREDLIBV =
STATICLIB = libz.a
TEST = all teststatic
VER = 1.2.7-optipng
Z_U4 = unsigned
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /usr/local
sharedlibdir = ${libdir}
uname = Darwin
--------------------


--------------------
./configure --static
Thu Feb 14 14:27:42 PST 2013

Checking for gcc...
=== ztest51325.c ===
extern int getchar();
int hello() {return getchar();}
===
gcc -c -O3 ztest51325.c
... using gcc

Building static library libz.a version 1.2.7-optipng with gcc.


=== ztest51325.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
gcc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest51325.c
ztest51325.c:2: error: expected ‘=’, ‘,’, ‘;’, ‘asm’ or ‘__attribute__’ before ‘dummy’
(exit code 1)
Checking for off64_t... No.

=== ztest51325.c ===
#include <stdio.h>
int main(void) {
  fseeko(NULL, 0, 0);
  return 0;
}
===
gcc -O3 -o ztest51325 ztest51325.c
Checking for fseeko... Yes.

=== ztest51325.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
gcc -O3 -o ztest51325 ztest51325.c
Checking for strerror... Yes.

=== ztest51325.c ===
#include <unistd.h>
int main() { return 0; }
===
gcc -c -O3 ztest51325.c
Checking for unistd.h... Yes.

=== ztest51325.c ===
#include <stdarg.h>
int main() { return 0; }
===
gcc -c -O3 ztest51325.c
Checking for stdarg.h... Yes.

=== ztest51325.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
gcc -c -O3 ztest51325.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest51325.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
gcc -O3 -o ztest51325 ztest51325.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest51325.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
gcc -c -O3 ztest51325.c
Checking for return value of vsnprintf()... Yes.

=== ztest51325.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
gcc -c -O3 ztest51325.c
Checking for attribute(visibility) support... Yes.

=== ztest51325.c ===
#include <stdio.h>
#define is32(n,t) for(n=1,k=0;n;n<<=1,k++);if(k==32){puts(t);return 0;}
int main() {
    int k;
    unsigned i;
    unsigned long l;
    unsigned short s;
    is32(i, "unsigned")
    is32(l, "unsigned long")
    is32(s, "unsigned short")
    return 1;
}
===
gcc -O3 -DHAVE_HIDDEN ztest51325.c -o ztest51325
Looking for a four-byte integer type... Found.

ALL = static
AR = /usr/bin/libtool
ARFLAGS = -o
CC = gcc
CFLAGS = -O3 -DHAVE_HIDDEN
CPP = gcc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = gcc
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -DHAVE_HIDDEN
SHAREDLIB =
SHAREDLIBM =
SHAREDLIBV =
STATICLIB = libz.a
TEST = all teststatic
VER = 1.2.7-optipng
Z_U4 = unsigned
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /usr/local
sharedlibdir = ${libdir}
uname = Darwin
--------------------


--------------------
./configure --static
Thu Feb 14 14:39:46 PST 2013

Checking for gcc...
=== ztest52117.c ===
extern int getchar();
int hello() {return getchar();}
===
gcc -c -O3 ztest52117.c
... using gcc

Building static library libz.a version 1.2.7-optipng with gcc.


=== ztest52117.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
gcc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest52117.c
ztest52117.c:2: error: expected ‘=’, ‘,’, ‘;’, ‘asm’ or ‘__attribute__’ before ‘dummy’
(exit code 1)
Checking for off64_t... No.

=== ztest52117.c ===
#include <stdio.h>
int main(void) {
  fseeko(NULL, 0, 0);
  return 0;
}
===
gcc -O3 -o ztest52117 ztest52117.c
Checking for fseeko... Yes.

=== ztest52117.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
gcc -O3 -o ztest52117 ztest52117.c
Checking for strerror... Yes.

=== ztest52117.c ===
#include <unistd.h>
int main() { return 0; }
===
gcc -c -O3 ztest52117.c
Checking for unistd.h... Yes.

=== ztest52117.c ===
#include <stdarg.h>
int main() { return 0; }
===
gcc -c -O3 ztest52117.c
Checking for stdarg.h... Yes.

=== ztest52117.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
gcc -c -O3 ztest52117.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest52117.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
gcc -O3 -o ztest52117 ztest52117.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest52117.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
gcc -c -O3 ztest52117.c
Checking for return value of vsnprintf()... Yes.

=== ztest52117.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
gcc -c -O3 ztest52117.c
Checking for attribute(visibility) support... Yes.

=== ztest52117.c ===
#include <stdio.h>
#define is32(n,t) for(n=1,k=0;n;n<<=1,k++);if(k==32){puts(t);return 0;}
int main() {
    int k;
    unsigned i;
    unsigned long l;
    unsigned short s;
    is32(i, "unsigned")
    is32(l, "unsigned long")
    is32(s, "unsigned short")
    return 1;
}
===
gcc -O3 -DHAVE_HIDDEN ztest52117.c -o ztest52117
Looking for a four-byte integer type... Found.

ALL = static
AR = /usr/bin/libtool
ARFLAGS = -o
CC = gcc
CFLAGS = -O3 -DHAVE_HIDDEN
CPP = gcc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = gcc
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -DHAVE_HIDDEN
SHAREDLIB =
SHAREDLIBM =
SHAREDLIBV =
STATICLIB = libz.a
TEST = all teststatic
VER = 1.2.7-optipng
Z_U4 = unsigned
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /usr/local
sharedlibdir = ${libdir}
uname = Darwin
--------------------


--------------------
./configure --static
Thu Feb 14 15:08:40 PST 2013

Checking for gcc...
=== ztest53252.c ===
extern int getchar();
int hello() {return getchar();}
===
gcc -c -O3 ztest53252.c
... using gcc

Building static library libz.a version 1.2.7-optipng with gcc.


=== ztest53252.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
gcc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest53252.c
ztest53252.c:2: error: expected ‘=’, ‘,’, ‘;’, ‘asm’ or ‘__attribute__’ before ‘dummy’
(exit code 1)
Checking for off64_t... No.

=== ztest53252.c ===
#include <stdio.h>
int main(void) {
  fseeko(NULL, 0, 0);
  return 0;
}
===
gcc -O3 -o ztest53252 ztest53252.c
Checking for fseeko... Yes.

=== ztest53252.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
gcc -O3 -o ztest53252 ztest53252.c
Checking for strerror... Yes.

=== ztest53252.c ===
#include <unistd.h>
int main() { return 0; }
===
gcc -c -O3 ztest53252.c
Checking for unistd.h... Yes.

=== ztest53252.c ===
#include <stdarg.h>
int main() { return 0; }
===
gcc -c -O3 ztest53252.c
Checking for stdarg.h... Yes.

=== ztest53252.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
gcc -c -O3 ztest53252.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest53252.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
gcc -O3 -o ztest53252 ztest53252.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest53252.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
gcc -c -O3 ztest53252.c
Checking for return value of vsnprintf()... Yes.

=== ztest53252.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
gcc -c -O3 ztest53252.c
Checking for attribute(visibility) support... Yes.

=== ztest53252.c ===
#include <stdio.h>
#define is32(n,t) for(n=1,k=0;n;n<<=1,k++);if(k==32){puts(t);return 0;}
int main() {
    int k;
    unsigned i;
    unsigned long l;
    unsigned short s;
    is32(i, "unsigned")
    is32(l, "unsigned long")
    is32(s, "unsigned short")
    return 1;
}
===
gcc -O3 -DHAVE_HIDDEN ztest53252.c -o ztest53252
Looking for a four-byte integer type... Found.

ALL = static
AR = /usr/bin/libtool
ARFLAGS = -o
CC = gcc
CFLAGS = -O3 -DHAVE_HIDDEN
CPP = gcc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = gcc
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -DHAVE_HIDDEN
SHAREDLIB =
SHAREDLIBM =
SHAREDLIBV =
STATICLIB = libz.a
TEST = all teststatic
VER = 1.2.7-optipng
Z_U4 = unsigned
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /usr/local
sharedlibdir = ${libdir}
uname = Darwin
--------------------


--------------------
./configure --static
Thu Feb 14 15:09:23 PST 2013

Checking for gcc...
=== ztest54109.c ===
extern int getchar();
int hello() {return getchar();}
===
gcc -c -O3 ztest54109.c
... using gcc

Building static library libz.a version 1.2.7-optipng with gcc.


=== ztest54109.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
gcc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest54109.c
ztest54109.c:2: error: expected ‘=’, ‘,’, ‘;’, ‘asm’ or ‘__attribute__’ before ‘dummy’
(exit code 1)
Checking for off64_t... No.

=== ztest54109.c ===
#include <stdio.h>
int main(void) {
  fseeko(NULL, 0, 0);
  return 0;
}
===
gcc -O3 -o ztest54109 ztest54109.c
Checking for fseeko... Yes.

=== ztest54109.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
gcc -O3 -o ztest54109 ztest54109.c
Checking for strerror... Yes.

=== ztest54109.c ===
#include <unistd.h>
int main() { return 0; }
===
gcc -c -O3 ztest54109.c
Checking for unistd.h... Yes.

=== ztest54109.c ===
#include <stdarg.h>
int main() { return 0; }
===
gcc -c -O3 ztest54109.c
Checking for stdarg.h... Yes.

=== ztest54109.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
gcc -c -O3 ztest54109.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest54109.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
gcc -O3 -o ztest54109 ztest54109.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest54109.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
gcc -c -O3 ztest54109.c
Checking for return value of vsnprintf()... Yes.

=== ztest54109.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
gcc -c -O3 ztest54109.c
Checking for attribute(visibility) support... Yes.

=== ztest54109.c ===
#include <stdio.h>
#define is32(n,t) for(n=1,k=0;n;n<<=1,k++);if(k==32){puts(t);return 0;}
int main() {
    int k;
    unsigned i;
    unsigned long l;
    unsigned short s;
    is32(i, "unsigned")
    is32(l, "unsigned long")
    is32(s, "unsigned short")
    return 1;
}
===
gcc -O3 -DHAVE_HIDDEN ztest54109.c -o ztest54109
Looking for a four-byte integer type... Found.

ALL = static
AR = /usr/bin/libtool
ARFLAGS = -o
CC = gcc
CFLAGS = -O3 -DHAVE_HIDDEN
CPP = gcc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = gcc
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -DHAVE_HIDDEN
SHAREDLIB =
SHAREDLIBM =
SHAREDLIBV =
STATICLIB = libz.a
TEST = all teststatic
VER = 1.2.7-optipng
Z_U4 = unsigned
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /usr/local
sharedlibdir = ${libdir}
uname = Darwin
--------------------


--------------------
./configure --static
Thu Feb 14 15:10:14 PST 2013

Checking for gcc...
=== ztest54969.c ===
extern int getchar();
int hello() {return getchar();}
===
gcc -c -O3 ztest54969.c
... using gcc

Building static library libz.a version 1.2.7-optipng with gcc.


=== ztest54969.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
gcc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest54969.c
ztest54969.c:2: error: expected ‘=’, ‘,’, ‘;’, ‘asm’ or ‘__attribute__’ before ‘dummy’
(exit code 1)
Checking for off64_t... No.

=== ztest54969.c ===
#include <stdio.h>
int main(void) {
  fseeko(NULL, 0, 0);
  return 0;
}
===
gcc -O3 -o ztest54969 ztest54969.c
Checking for fseeko... Yes.

=== ztest54969.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
gcc -O3 -o ztest54969 ztest54969.c
Checking for strerror... Yes.

=== ztest54969.c ===
#include <unistd.h>
int main() { return 0; }
===
gcc -c -O3 ztest54969.c
Checking for unistd.h... Yes.

=== ztest54969.c ===
#include <stdarg.h>
int main() { return 0; }
===
gcc -c -O3 ztest54969.c
Checking for stdarg.h... Yes.

=== ztest54969.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
gcc -c -O3 ztest54969.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest54969.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
gcc -O3 -o ztest54969 ztest54969.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest54969.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
gcc -c -O3 ztest54969.c
Checking for return value of vsnprintf()... Yes.

=== ztest54969.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
gcc -c -O3 ztest54969.c
Checking for attribute(visibility) support... Yes.

=== ztest54969.c ===
#include <stdio.h>
#define is32(n,t) for(n=1,k=0;n;n<<=1,k++);if(k==32){puts(t);return 0;}
int main() {
    int k;
    unsigned i;
    unsigned long l;
    unsigned short s;
    is32(i, "unsigned")
    is32(l, "unsigned long")
    is32(s, "unsigned short")
    return 1;
}
===
gcc -O3 -DHAVE_HIDDEN ztest54969.c -o ztest54969
Looking for a four-byte integer type... Found.

ALL = static
AR = /usr/bin/libtool
ARFLAGS = -o
CC = gcc
CFLAGS = -O3 -DHAVE_HIDDEN
CPP = gcc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = gcc
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -DHAVE_HIDDEN
SHAREDLIB =
SHAREDLIBM =
SHAREDLIBV =
STATICLIB = libz.a
TEST = all teststatic
VER = 1.2.7-optipng
Z_U4 = unsigned
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /usr/local
sharedlibdir = ${libdir}
uname = Darwin
--------------------


--------------------
./configure --static
Thu Feb 14 15:12:24 PST 2013

Checking for gcc...
=== ztest55853.c ===
extern int getchar();
int hello() {return getchar();}
===
gcc -c -O3 ztest55853.c
... using gcc

Building static library libz.a version 1.2.7-optipng with gcc.


=== ztest55853.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
gcc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest55853.c
ztest55853.c:2: error: expected ‘=’, ‘,’, ‘;’, ‘asm’ or ‘__attribute__’ before ‘dummy’
(exit code 1)
Checking for off64_t... No.

=== ztest55853.c ===
#include <stdio.h>
int main(void) {
  fseeko(NULL, 0, 0);
  return 0;
}
===
gcc -O3 -o ztest55853 ztest55853.c
Checking for fseeko... Yes.

=== ztest55853.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
gcc -O3 -o ztest55853 ztest55853.c
Checking for strerror... Yes.

=== ztest55853.c ===
#include <unistd.h>
int main() { return 0; }
===
gcc -c -O3 ztest55853.c
Checking for unistd.h... Yes.

=== ztest55853.c ===
#include <stdarg.h>
int main() { return 0; }
===
gcc -c -O3 ztest55853.c
Checking for stdarg.h... Yes.

=== ztest55853.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
gcc -c -O3 ztest55853.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest55853.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
gcc -O3 -o ztest55853 ztest55853.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest55853.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
gcc -c -O3 ztest55853.c
Checking for return value of vsnprintf()... Yes.

=== ztest55853.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
gcc -c -O3 ztest55853.c
Checking for attribute(visibility) support... Yes.

=== ztest55853.c ===
#include <stdio.h>
#define is32(n,t) for(n=1,k=0;n;n<<=1,k++);if(k==32){puts(t);return 0;}
int main() {
    int k;
    unsigned i;
    unsigned long l;
    unsigned short s;
    is32(i, "unsigned")
    is32(l, "unsigned long")
    is32(s, "unsigned short")
    return 1;
}
===
gcc -O3 -DHAVE_HIDDEN ztest55853.c -o ztest55853
Looking for a four-byte integer type... Found.

ALL = static
AR = /usr/bin/libtool
ARFLAGS = -o
CC = gcc
CFLAGS = -O3 -DHAVE_HIDDEN
CPP = gcc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = gcc
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -DHAVE_HIDDEN
SHAREDLIB =
SHAREDLIBM =
SHAREDLIBV =
STATICLIB = libz.a
TEST = all teststatic
VER = 1.2.7-optipng
Z_U4 = unsigned
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /usr/local
sharedlibdir = ${libdir}
uname = Darwin
--------------------


--------------------
./configure --static
Thu Feb 14 15:15:40 PST 2013

Checking for gcc...
=== ztest56731.c ===
extern int getchar();
int hello() {return getchar();}
===
gcc -c -O3 ztest56731.c
... using gcc

Building static library libz.a version 1.2.7-optipng with gcc.


=== ztest56731.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
gcc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest56731.c
ztest56731.c:2: error: expected ‘=’, ‘,’, ‘;’, ‘asm’ or ‘__attribute__’ before ‘dummy’
(exit code 1)
Checking for off64_t... No.

=== ztest56731.c ===
#include <stdio.h>
int main(void) {
  fseeko(NULL, 0, 0);
  return 0;
}
===
gcc -O3 -o ztest56731 ztest56731.c
Checking for fseeko... Yes.

=== ztest56731.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
gcc -O3 -o ztest56731 ztest56731.c
Checking for strerror... Yes.

=== ztest56731.c ===
#include <unistd.h>
int main() { return 0; }
===
gcc -c -O3 ztest56731.c
Checking for unistd.h... Yes.

=== ztest56731.c ===
#include <stdarg.h>
int main() { return 0; }
===
gcc -c -O3 ztest56731.c
Checking for stdarg.h... Yes.

=== ztest56731.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
gcc -c -O3 ztest56731.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest56731.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
gcc -O3 -o ztest56731 ztest56731.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest56731.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
gcc -c -O3 ztest56731.c
Checking for return value of vsnprintf()... Yes.

=== ztest56731.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
gcc -c -O3 ztest56731.c
Checking for attribute(visibility) support... Yes.

=== ztest56731.c ===
#include <stdio.h>
#define is32(n,t) for(n=1,k=0;n;n<<=1,k++);if(k==32){puts(t);return 0;}
int main() {
    int k;
    unsigned i;
    unsigned long l;
    unsigned short s;
    is32(i, "unsigned")
    is32(l, "unsigned long")
    is32(s, "unsigned short")
    return 1;
}
===
gcc -O3 -DHAVE_HIDDEN ztest56731.c -o ztest56731
Looking for a four-byte integer type... Found.

ALL = static
AR = /usr/bin/libtool
ARFLAGS = -o
CC = gcc
CFLAGS = -O3 -DHAVE_HIDDEN
CPP = gcc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = gcc
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -DHAVE_HIDDEN
SHAREDLIB =
SHAREDLIBM =
SHAREDLIBV =
STATICLIB = libz.a
TEST = all teststatic
VER = 1.2.7-optipng
Z_U4 = unsigned
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /usr/local
sharedlibdir = ${libdir}
uname = Darwin
--------------------


--------------------
./configure --static
Thu Feb 14 15:23:27 PST 2013

Checking for gcc...
=== ztest57656.c ===
extern int getchar();
int hello() {return getchar();}
===
gcc -c -O3 ztest57656.c
... using gcc

Building static library libz.a version 1.2.7-optipng with gcc.


=== ztest57656.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
gcc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest57656.c
ztest57656.c:2: error: expected ‘=’, ‘,’, ‘;’, ‘asm’ or ‘__attribute__’ before ‘dummy’
(exit code 1)
Checking for off64_t... No.

=== ztest57656.c ===
#include <stdio.h>
int main(void) {
  fseeko(NULL, 0, 0);
  return 0;
}
===
gcc -O3 -o ztest57656 ztest57656.c
Checking for fseeko... Yes.

=== ztest57656.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
gcc -O3 -o ztest57656 ztest57656.c
Checking for strerror... Yes.

=== ztest57656.c ===
#include <unistd.h>
int main() { return 0; }
===
gcc -c -O3 ztest57656.c
Checking for unistd.h... Yes.

=== ztest57656.c ===
#include <stdarg.h>
int main() { return 0; }
===
gcc -c -O3 ztest57656.c
Checking for stdarg.h... Yes.

=== ztest57656.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
gcc -c -O3 ztest57656.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest57656.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
gcc -O3 -o ztest57656 ztest57656.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest57656.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
gcc -c -O3 ztest57656.c
Checking for return value of vsnprintf()... Yes.

=== ztest57656.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
gcc -c -O3 ztest57656.c
Checking for attribute(visibility) support... Yes.

=== ztest57656.c ===
#include <stdio.h>
#define is32(n,t) for(n=1,k=0;n;n<<=1,k++);if(k==32){puts(t);return 0;}
int main() {
    int k;
    unsigned i;
    unsigned long l;
    unsigned short s;
    is32(i, "unsigned")
    is32(l, "unsigned long")
    is32(s, "unsigned short")
    return 1;
}
===
gcc -O3 -DHAVE_HIDDEN ztest57656.c -o ztest57656
Looking for a four-byte integer type... Found.

ALL = static
AR = /usr/bin/libtool
ARFLAGS = -o
CC = gcc
CFLAGS = -O3 -DHAVE_HIDDEN
CPP = gcc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = gcc
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -DHAVE_HIDDEN
SHAREDLIB =
SHAREDLIBM =
SHAREDLIBV =
STATICLIB = libz.a
TEST = all teststatic
VER = 1.2.7-optipng
Z_U4 = unsigned
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /usr/local
sharedlibdir = ${libdir}
uname = Darwin
--------------------


